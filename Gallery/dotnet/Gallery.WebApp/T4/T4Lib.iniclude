<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE"#>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ Include File="Multiple.iniclude" #>

<#+

public class DteHelper 
{
	public DteHelper(object host)
	{
		this.Host = host as ITextTemplatingEngineHost;
	}
	
	public EnvDTE.DTE Dte
	{
		get
		{
			return this.GetHostServiceProvider();
		}
	}
	
	private readonly ITextTemplatingEngineHost Host;
	
	/// Functions requires hostspecific true
	/// <summary>
	/// Gets the solution name of the project.
	/// </summary>
	public string GetSolutionName()
	{
		EnvDTE.DTE dte = GetHostServiceProvider();
		return System.IO.Path.GetFileNameWithoutExtension(dte.Solution.FullName);
	}

	public IEnumerable<EnvDTE.ProjectItem> GetAllProjectItems()
	{
		EnvDTE.DTE dte = GetHostServiceProvider();
		return this.GetAllProjectItemsRecursive(this.GetTemplateAsProjectItem(dte).ContainingProject.ProjectItems);
	}
	
    public IEnumerable<EnvDTE.ProjectItem> GetAllProjectItemsRecursive(EnvDTE.ProjectItems projectItems) 
	{
    	foreach (EnvDTE.ProjectItem projectItem in projectItems) 
		{
        	foreach (EnvDTE.ProjectItem subItem in GetAllProjectItemsRecursive(projectItem.ProjectItems))
        	{
            	yield return subItem;
        	}

        	yield return projectItem;
    	}
	}
	
	public string GetProjectItemFullPath(EnvDTE.ProjectItem item)
	{
		return item.Properties.Item("FullPath").Value.ToString();
	}
	
	/// <summary
	/// Gets the project name of the active template file.
	/// </summary>
	public string GetCurrentProjectName()
	{
		EnvDTE.DTE dte = GetHostServiceProvider();
		return dte.ActiveDocument.ProjectItem.ContainingProject.Name;
	}

	/// <summary>
	/// Sets the custom tool for generated item.
	/// <param name="generatedFilename">Filename of the generated item</param>
	/// <param name="customToolName">The name of the custom tool.</param>
	/// <example>
	/// 	SetCustomToolForGeneratedItem("Resource.resx", "ResXFileCodeGenerator");
	/// </example>
	/// </summary>
	public void SetCustomToolForGeneratedItem(string generatedFilename, string customToolName)
	{
		EnvDTE.DTE dte = GetHostServiceProvider();
		EnvDTE.ProjectItem subItem = GetTemplateAsProjectItem(dte).
			ProjectItems.Cast<EnvDTE.ProjectItem>().Where(p=>p.Name == generatedFilename).First();
		
		SetPropertyValue(subItem, "CustomTool", customToolName);
	}

	/// <summary>
	/// Sets the custom tool for the first generated item.
	/// <param name="customToolName">The name of the custom tool.</param>
	/// <example>
	/// 	SetCustomToolForFirstGeneratedItem("ResXFileCodeGenerator");
	/// </example>
	/// </summary>
	public void SetCustomToolForFirstGeneratedItem(string customToolName)
	{
		EnvDTE.DTE dte = GetHostServiceProvider();
		EnvDTE.ProjectItem firstSubItem = GetTemplateAsProjectItem(dte).
			ProjectItems.Cast<EnvDTE.ProjectItem>().First();

		SetPropertyValue(firstSubItem, "CustomTool", customToolName);
	}

	/// <summary>
	/// Sets a property value for the project item.
	/// </summary>
	public void SetPropertyValue(EnvDTE.ProjectItem item, string propertyName, object value)
	{
		EnvDTE.Property property = item.Properties.Item(propertyName);
		if (property == null)
		{
			throw new ArgumentException(String.Format("The property {0} was not found.", propertyName));
		}
		else
		{
			property.Value = value;
		}
	}

	/// <summary>
	/// Gets the T4 template as vs projectitem.
	/// </summary>
	public EnvDTE.ProjectItem GetTemplateAsProjectItem(EnvDTE.DTE dte)
	{
		return dte.Solution.FindProjectItem(this.Host.TemplateFile);
	}

	/// <summary>
	/// Adds a missing file to the t4 vs projectitem.
	/// </summary>
	public void AddMissingFileToProject(
			EnvDTE.ProjectItem pItem, string fileName)
	{
		var isMissing = (from itm in pItem.ProjectItems.Cast<EnvDTE.ProjectItem>()
			where itm.Name == fileName
			select itm).Count() == 0;

		if (isMissing)
			pItem.ProjectItems.AddFromFile(GetPath(fileName));	
	}

	/// <summary>
	/// Gets the vs automation object EnvDTE.DTE.
	/// </summary>
	public EnvDTE.DTE GetHostServiceProvider()
	{
		var hostServiceProvider = Host as IServiceProvider;
		EnvDTE.DTE dte = null;
		if (hostServiceProvider != null)
		{
			dte = hostServiceProvider.
				GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
		}

		return dte;
	}
	
	/// <summary>
	/// Gets the full path of the file.
	/// </summary>
	public string GetPath(string fileName)
	{
		string templateDirectory = Path.GetDirectoryName(
				Host.TemplateFile);
		return Path.Combine(templateDirectory, fileName);
	}		

    public IList<Project> GetProjects()
    {
        Projects projects = GetHostServiceProvider().Solution.Projects;
        List<Project> list = new List<Project>();
        var item = projects.GetEnumerator();
        while (item.MoveNext())
        {
            var project = item.Current as Project;
            if (project == null)
            {
                continue;
            }

            if (project.Kind == ProjectKinds.vsProjectKindSolutionFolder)
            {
                list.AddRange(GetSolutionFolderProjects(project));
            }
            else
            {
                list.Add(project);
            }
        }

        return list;
    }
    private static IEnumerable<Project> GetSolutionFolderProjects(Project solutionFolder)
    {
        List<Project> list = new List<Project>();
        for (var i = 1; i <= solutionFolder.ProjectItems.Count; i++)
        {
            var subProject = solutionFolder.ProjectItems.Item(i).SubProject;
            if (subProject == null)
            {
                continue;
            }

            // If this is another solution folder, do a recursive call, otherwise add
            if (subProject.Kind == ProjectKinds.vsProjectKindSolutionFolder)
            {
               list.AddRange(GetSolutionFolderProjects(subProject));
            }
           else
           {
               list.Add(subProject);
           }
        }
        return list;
    }

	public IEnumerable<CodeClass> GetClasses(){
		var allProject = GetProjects();
		var list  = new List<CodeClass>();		
		foreach(var each in allProject){
			list.AddRange(Traverse(each.ProjectItems));
		}
		return list;
	}

	public IEnumerable<ProjectItem> GetProjectItems(){
		var allProject = GetProjects();
		var list  = new List<ProjectItem>();		
		foreach(var each in allProject){
			list.AddRange(TraverseItems(each.ProjectItems));
		}
		return list.Distinct().ToArray();
	}
	public static IEnumerable<ProjectItem> TraverseItems(ProjectItems items){
		var list = new List<ProjectItem>();
		if (items == null) return list;

		foreach(var each in items.OfType<ProjectItem>()){
			list.Add(each);

			if (each.ProjectItems != null){
				foreach(var child in TraverseItems(each.ProjectItems)){
					list.Add(child);
				}
			}
		}
		return list;
	}

	public static IEnumerable<CodeClass> Traverse(ProjectItems items){
		var list = new List<CodeClass>();
		if (items == null) return list;

        foreach (ProjectItem pi in items)
        {
            if (pi.FileCodeModel != null)
            {
                var codeElements = pi.FileCodeModel.CodeElements;
                    
                foreach (object elem in codeElements)
                {
                    if (elem is CodeNamespace ns){
						foreach (var each in Traverse(ns)){
							list.Add(each);
						}
					}
                }
            }

            if (pi.ProjectItems != null){
				foreach (var each in Traverse(pi.ProjectItems)){
					list.Add(each);
				}
			}
        }
		return list;
	}
	private static IEnumerable<CodeClass> Traverse(CodeNamespace ns){
		var list = new List<CodeClass>();
		if(ns.Members != null){
            foreach (object elem in ns.Members)
            {
                if (elem is CodeClass cc)
                    list.Add(cc);
            }
		}
		return list;
	}

	public bool HasAttribute(CodeClass cc, string attributeName){
		if (cc.Attributes == null) return false;
        foreach (CodeAttribute each in cc.Attributes)
        {
			if (each.Name == attributeName)
				return true;
        }
		return false;
	}

	public bool HasImplements(CodeClass cc, string baseClassName){
		if (cc == null) return false;
		
		try{
			if (cc.Bases != null) {
				foreach(CodeClass each in cc.Bases){
					if (each.Name.StartsWith(baseClassName)) return true;
				}
			}
		}catch{
			return false;
		}
		return false;
	}
}


public class MultiWriter : IDisposable{

	public MultiWriter(ITextTemplatingEngineHost host, StringBuilder template, string fileName){
		this.FileName = fileName;
		this.Manager = new MultipleManager(host, template, true) 
		{ 
			OutputPath = Path.GetDirectoryName(host.TemplateFile) 
		};
		this.Writer = template;
		Manager.StartBlock(fileName);
	}
	protected string FileName { get; set; }
	protected StringBuilder Writer { get; set; }
	protected MultipleManager Manager { get; set; }
	 
	public void WriteLine(string s){
		Writer.AppendLine(s);
	}

	public void Dispose(){
		Manager.EndBlock();
		Manager.Process(true);
	}
}

#>